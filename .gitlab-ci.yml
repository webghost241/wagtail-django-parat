stages:
  - setup
  - test
  - build
  - deploy

# Configuration for the alpine postgres image
# that is used for testing
variables:
  POSTGRES_DB: parat
  POSTGRES_USER: parat
  POSTGRES_PASSWORD: ""
  POSTGRES_HOST_AUTH_METHOD: trust

build django test container:
  stage: setup
  before_script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY_IMAGE
  script:
    - docker build -f ./docker/django/Dockerfile --target dev -t $CI_REGISTRY_IMAGE/parat-django-test:$CI_COMMIT_SHORT_SHA .
    - docker tag $CI_REGISTRY_IMAGE/parat-django-test:$CI_COMMIT_SHORT_SHA $CI_REGISTRY_IMAGE/parat-django-test:latest
    - docker push $CI_REGISTRY_IMAGE/parat-django-test:$CI_COMMIT_SHORT_SHA
    - docker push $CI_REGISTRY_IMAGE/parat-django-test:latest
  tags:
    - docker-cloud

django test:
  stage: test
  image:
    name: "${CI_REGISTRY_IMAGE}/parat-django-test:latest"
    pull_policy: always
  #needs:
  #  - build django test container
  variables:
    DJANGO_DATABASE_URL: "postgres://parat:1234@db-test-django/parat"
    DJANGO_ENVIRONMENT: "test"
    DJANGO_VITE_DEV_MODE: "True"
    DJANGO_SETTINGS_MODULE: "config.settings"
    DISABLE_SERVER_SIDE_CURSORS: "True"
  script:
    # if project was created inside a subfolder
    # - cd parat/
    - ./manage.py migrate
    - /venv/bin/pytest --tb=no --cov-report term-missing --cov=parat --ignore deploy
  services:
    - name: postgres:14-alpine
      alias: db-test-django
  tags:
    - docker-cloud

django lint:
  stage: test
  image:
    name: "${CI_REGISTRY_IMAGE}/parat-django-test:latest"
    # pull_policy: always
  variables:
    DJANGO_DATABASE_URL: "postgres://parat:1234@db-test-django/parat"
    DJANGO_ENVIRONMENT: "test"
    DJANGO_VITE_DEV_MODE: "True"
  script:
    - source /venv/bin/activate
    - flake8
    - black . --check
  allow_failure: true
  services:
    - name: postgres:14-alpine
      alias: db-test-django
  tags:
    - docker-cloud

assets:
  artifacts:
    expire_in: 1 week
    paths:
      - ui/dist/
  before_script:
    - cd ui
    - npm ci --cache .npm --prefer-offline --include=dev
  cache:
    key: "$CI_COMMIT_REF_SLUG"
    paths:
      - ui/.npm/
  image:
    name: docker.io/node:18-slim
    pull_policy: if-not-present
  script:
    - npm run build
  stage: build
  tags:
    - docker-cloud

container image:
  before_script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
  needs:
    - assets
  # TODO: uncomment me once CI_COMMIT_SHA image thing in project.nomad is solved
  #only:
  #  changes:
  #    - config/**/*
  #    - docker/**/*
  #    - parat/**/*
  #    - requirements/**/*
  #    - .gitlab-ci.yml
  #    - manage.py
  script:
    - docker build -t "${CI_REGISTRY_IMAGE}/parat:${CI_COMMIT_SHA}" --load -f docker/django/Dockerfile --target app .
    - docker push "${CI_REGISTRY_IMAGE}/parat:${CI_COMMIT_SHA}"
    - docker tag "${CI_REGISTRY_IMAGE}/parat:${CI_COMMIT_SHA}" "${CI_REGISTRY_IMAGE}/parat:${CI_COMMIT_REF_SLUG}"
    - docker push "${CI_REGISTRY_IMAGE}/parat:${CI_COMMIT_REF_SLUG}"
  stage: build
  tags:
    - docker-cloud

build nginx:
  stage: build
  before_script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
  script:
    - docker build -t "${CI_REGISTRY_IMAGE}/nginx:${CI_COMMIT_SHA}" --load -f docker/nginx/Dockerfile docker/nginx
    - docker push "${CI_REGISTRY_IMAGE}/nginx:${CI_COMMIT_SHA}"
    - docker tag "${CI_REGISTRY_IMAGE}/nginx:${CI_COMMIT_SHA}" "${CI_REGISTRY_IMAGE}/nginx:${CI_COMMIT_REF_SLUG}"
    - docker push "${CI_REGISTRY_IMAGE}/nginx:${CI_COMMIT_REF_SLUG}"
  tags:
    - docker-cloud

###
# Deploy via ansible
###

deploy to staging:
  environment:
    name: parat staging
    url: https://parat-staging-parat.sphericalelephant.com
  image: registry.sphericalelephant.com/sphericalelephant/sphericalelephant/deploy:latest
  stage: deploy
  before_script:
    - eval $(ssh-agent -s)
    - chmod 400 "$SSH_PRIVATE_KEY_DEPLOY"
    - ssh-add "$SSH_PRIVATE_KEY_DEPLOY"
    - mkdir -p ~/.ssh
  script:
    - chmod 700 deploy/ansible
    - make -C deploy/ansible deploy
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: never
    - if: "$CI_COMMIT_TAG || $CI_COMMIT_BRANCH"
  tags:
    - docker-cloud

deploy to production:
  environment:
    name: parat production
    url: https://parat-production-parat.sphericalelephant.com
  image: registry.sphericalelephant.com/sphericalelephant/sphericalelephant/deploy:latest
  stage: deploy
  before_script:
    - eval $(ssh-agent -s)
    - chmod 400 "$SSH_PRIVATE_KEY_DEPLOY"
    - ssh-add "$SSH_PRIVATE_KEY_DEPLOY"
    - mkdir -p ~/.ssh
  script:
    - chmod 700 deploy/ansible
    - make -C deploy/ansible deploy stage=production
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: never
    - if: "$CI_COMMIT_TAG || $CI_COMMIT_BRANCH"
  when: manual
  tags:
    - docker-cloud
